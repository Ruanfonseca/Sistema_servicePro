
código em python para conectar ao rabbitmq


import pika
import json
from flask import Flask, request

app = Flask(__name__)

@app.route('/enviar-dados/wifi', methods=['POST'])
def receber_dados_wifi():
    dados = request.get_json()
    # Processar os dados recebidos
    # Estabelece conexão com o RabbitMQ
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()

    # Declara a fila
    queue_name = 'Notificacoes_Finalizacao_wifi'
    channel.queue_declare(queue=queue_name)

    # Converte os dados em uma string no formato JSON
    mensagem = json.dumps(dados)

    # Envia a mensagem para a fila
    channel.basic_publish(exchange='', routing_key=queue_name, body=mensagem)

    # Fecha a conexão com o RabbitMQ
    connection.close()

    print("Dados recebidos:", dados)
    return "Dados recebidos com sucesso!"

@app.route('/enviar-dados/sala', methods=['POST'])
def receber_dados_sala():
    dados = request.get_json()
    # Processar os dados recebidos
    # Estabelece conexão com o RabbitMQ
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()

    # Declara a fila
    queue_name = 'Notificacoes_Finalizacao_sala'
    channel.queue_declare(queue=queue_name)

    # Converte os dados em uma string no formato JSON
    mensagem = json.dumps(dados)

    # Envia a mensagem para a fila
    channel.basic_publish(exchange='', routing_key=queue_name, body=mensagem)

    # Fecha a conexão com o RabbitMQ
    connection.close()

    print("Dados recebidos:", dados)
    return "Dados recebidos com sucesso!"

@app.route('/enviar-dados/projetor', methods=['POST'])
def receber_dados_projetor():
    dados = request.get_json()
    # Processar os dados recebidos
    # Estabelece conexão com o RabbitMQ
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()

    # Declara a fila
    queue_name = 'Notificacoes_Finalizacao_projetor'
    channel.queue_declare(queue=queue_name)

    # Converte os dados em uma string no formato JSON
    mensagem = json.dumps(dados)

    # Envia a mensagem para a fila
    channel.basic_publish(exchange='', routing_key=queue_name, body=mensagem)

    # Fecha a conexão com o RabbitMQ
    connection.close()

    print("Dados recebidos:", dados)
    return "Dados recebidos com sucesso!"

if __name__ == '__main__':
    app.run()
